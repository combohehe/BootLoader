///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   03/Jul/2015  20:20:04 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä° /
//                          æ7\Library\cc2430\CUL\source\dmaAllocChannel.c    /
//    Command line       =  "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\Library\cc2430\CUL\source\dmaAllocChannel.c"  /
//                          -D chip=2430 -D COMPLETE_APPLICATION -D RX -lB    /
//                          "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\App_Ex\cc2430\IAR_files\RX\List\" -o          /
//                          "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\App_Ex\cc2430\IAR_files\RX\Obj\" -e -z9       /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8 -I     /
//                          "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\App_Ex\cc2430\IAR_files\..\..\..\LIBRARY\CC24 /
//                          30\CUL\INCLUDE\" -I "C:\Documents and             /
//                          Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\ /
//                          IAR_files\..\..\..\LIBRARY\CC2430\HAL\INCLUDE\"   /
//                          -I "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐ /
//                          Þ¸Ä°æ7\App_Ex\cc2430\IAR_files\..\..\..\LIBRARY\C /
//                          C2430\EB\INCLUDE\" -I "C:\Documents and           /
//                          Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\ /
//                          IAR_files\..\INCLUDE\" -I "C:\IAR                 /
//                          Systems\Embedded Workbench 4.0 Evaluation         /
//                          version\8051\INC\" -I "C:\IAR Systems\Embedded    /
//                          Workbench 4.0 Evaluation version\8051\INC\CLIB\"  /
//    List file          =  C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä° /
//                          æ7\App_Ex\cc2430\IAR_files\RX\List\dmaAllocChanne /
//                          l.s51                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME dmaAllocChannel

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?S_SHL
        EXTERN ?V0

        PUBWEAK DMAARM
        PUBWEAK DMAIRQ
        PUBWEAK _A_IEN0
        PUBLIC culDmaAllocChannel

        EXTERN dmaChannel1to4
        EXTERN dmaTable

// C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\Library\cc2430\CUL\source\dmaAllocChannel.c
//    1 /******************************************************************************
//    2 Filename:     dmaAllocChannel.c
//    3 Target:       cc2430
//    4 Revised:      16/12-2005
//    5 Revision:     1.0
//    6 ******************************************************************************/
//    7 
//    8 #include "cul.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1
//    9 
//   10 extern DMA_DESC dmaChannel1to4[4];
//   11 extern DMA_TABLE_ENTRY dmaTable[DMA_ADM_NUMBER_OF_CHANNELS];
//   12 
//   13 //-----------------------------------------------------------------------------
//   14 // See cul.h for a description of this function.
//   15 //-----------------------------------------------------------------------------

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   16 DMA_DESC* culDmaAllocChannel(UINT8* pDmaChannelNumber, FUNCTION* callBackFunction){
culDmaAllocChannel:
        MOV     A,#-0xa
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 10
        ; Auto size: 0
//   17    DMA_DESC* dmaDesc;
//   18    BYTE savedIntEnable = 0x00;
//   19    INT8 i;
//   20 
//   21    // Checking for an unassigned DMA channel , DMA_ADM_NUMBER_OF_CHANNELS=5
//   22    for(i = 1; i <= DMA_ADM_NUMBER_OF_CHANNELS; i++){
        MOV     R7,#0x1
//   23       if(dmaTable[i].assigned == FALSE){
??culDmaAllocChannel_0:
        MOV     A,R7
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R6,B
        MOV     B,#0x3
        MOV     A,R1
        LCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        JZ      ??culDmaAllocChannel_1
//   24          break;
//   25       }
//   26    }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x6
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??culDmaAllocChannel_0
//   27 
//   28    // If no channel is available, the function returns.
//   29    if(i > DMA_ADM_NUMBER_OF_CHANNELS){
??culDmaAllocChannel_1:
        MOV     A,R7
        CLR     C
        SUBB    A,#0x6
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??culDmaAllocChannel_2
//   30       *pDmaChannelNumber = 0x00;
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//   31       dmaDesc = NULL;
        MOV     R2,A
        SJMP    ??culDmaAllocChannel_3
//   32    }
//   33    // An available table entry was found
//   34    else {
//   35       // Deactivating the channel and erasing old interrupt flag
//   36       DMA_ABORT_CHANNEL(i);
??culDmaAllocChannel_2:
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R7
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R6,?V0 + 0
        MOV     A,#0x1f
        ANL     A,R6
        ORL     A,#0x80
        MOV     0xd6,A
//   37       DMAIRQ &= ~(1 << i);
        MOV     A,R6
        CPL     A
        ANL     A,0xd1
        MOV     0xd1,A
//   38 
//   39       // Storing interrupt enable register and turning off interrupts.
//   40       savedIntEnable = IEN0;
        MOV     A,0xa8
        MOV     ?V0 + 2,A
//   41       INT_GLOBAL_ENABLE(INT_OFF);
        CLR     0xa8.7
//   42 
//   43       // Reserving the DMA channel.
//   44       dmaTable[i].assigned = TRUE;
        MOV     A,R7
        MOV     ?V0 + 0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R6,B
        MOV     B,#0x3
        MOV     A,?V0 + 1
        LCALL   ?Subroutine0
??CrossCallReturnLabel_1:
        MOV     A,#0x1
        MOVX    @DPTR,A
//   45       dmaTable[i].callBackFunction = callBackFunction;
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   46       *pDmaChannelNumber = i;
        MOV     A,R7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//   47 
//   48       // Restoring old interrupt enable register.
//   49       IEN0 = savedIntEnable;
        MOV     0xa8,?V0 + 2
//   50 
//   51       dmaDesc = &dmaChannel1to4[i-1];
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#((dmaChannel1to4 + 248) & 0xff)
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#(((dmaChannel1to4 - 8) >> 8) & 0xff)
??culDmaAllocChannel_3:
        MOV     R3,A
//   52    }
//   53 
//   54    // Returning pointer to the DMA descriptor
//   55    return dmaDesc;
        MOV     R7,#0x3
        LJMP    ?FUNC_LEAVE_XDATA
        REQUIRE _A_IEN0
        REQUIRE DMAIRQ
        REQUIRE DMAARM
//   56 } // ends culDmaAlloc()

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(dmaTable & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#((dmaTable >> 8) & 0xff)
        MOV     DPH,A
        RET

        END
//   57 
//   58 
// 
// 175 bytes in segment NEAR_CODE
//   3 bytes in segment SFR_AN
// 
// 175 bytes of CODE memory
//   0 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
