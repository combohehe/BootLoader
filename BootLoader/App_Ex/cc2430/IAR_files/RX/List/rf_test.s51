///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   03/Jul/2015  20:20:06 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä° /
//                          æ7\App_Ex\cc2430\source\rf_test.c                 /
//    Command line       =  "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\App_Ex\cc2430\source\rf_test.c" -D chip=2430  /
//                          -D COMPLETE_APPLICATION -D RX -lB "C:\Documents   /
//                          and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2 /
//                          430\IAR_files\RX\List\" -o "C:\Documents and      /
//                          Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\ /
//                          IAR_files\RX\Obj\" -e -z9 --debug --core=plain    /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8 -I     /
//                          "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä /
//                          °æ7\App_Ex\cc2430\IAR_files\..\..\..\LIBRARY\CC24 /
//                          30\CUL\INCLUDE\" -I "C:\Documents and             /
//                          Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\ /
//                          IAR_files\..\..\..\LIBRARY\CC2430\HAL\INCLUDE\"   /
//                          -I "C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐ /
//                          Þ¸Ä°æ7\App_Ex\cc2430\IAR_files\..\..\..\LIBRARY\C /
//                          C2430\EB\INCLUDE\" -I "C:\Documents and           /
//                          Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\ /
//                          IAR_files\..\INCLUDE\" -I "C:\IAR                 /
//                          Systems\Embedded Workbench 4.0 Evaluation         /
//                          version\8051\INC\" -I "C:\IAR Systems\Embedded    /
//                          Workbench 4.0 Evaluation version\8051\INC\CLIB\"  /
//    List file          =  C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä° /
//                          æ7\App_Ex\cc2430\IAR_files\RX\List\rf_test.s51    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME rf_test

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK APP_INFO1
        PUBLIC BT_Init
        PUBWEAK CLKCON
        PUBLIC CheckAPP
        PUBLIC CheckTable
        PUBWEAK Config_Table
        PUBLIC Delay
        PUBLIC Enter_IAP_Mode
        PUBLIC FeetDog
        PUBLIC FlashLed
        PUBLIC GetConfig
        PUBLIC IAP_ACK
        PUBLIC IAP_NetWork
        PUBLIC IAP_Request
        PUBWEAK IEN2
        PUBLIC Init_Watchdog
        PUBLIC Is_APP1_Full
        PUBLIC Mac_Judge
        PUBLIC MainAddr
        PUBWEAK Node_Info
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC Process_IAP_Data
        PUBLIC PutChar
        PUBLIC RADIO_Receive_Data
        PUBWEAK RFIF
        PUBLIC Read_Flash
        PUBLIC Retry_Times
        PUBWEAK SLEEP
        PUBLIC Table_Length
        PUBWEAK U0DBUF
        PUBLIC UartTX_Send_String
        PUBLIC VerifyProgram
        PUBWEAK WDCTL
        PUBLIC WriteFlag
        PUBLIC WriteInfo
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBWEAK _A_TCON
        PUBWEAK __Constant_0
        PUBWEAK __Constant_2000
        PUBWEAK __Constant_2004
        PUBWEAK __Constant_256250
        PUBWEAK __Constant_25b070
        PUBWEAK __Constant_25d780
        PUBWEAK __Constant_3
        PUBWEAK __Constant_c000
        PUBWEAK __Constant_c004
        PUBWEAK __Constant_d800
        PUBWEAK __Constant_fffc
        PUBLIC frequency
        PUBLIC initRfTest
        PUBLIC main
        PUBLIC myAddr
        PUBLIC receiveBuffer
        PUBLIC receiveLength
        PUBLIC remoteAddr
        PUBLIC sender

        EXTERN radioInit
        EXTERN FlashRead
        EXTERN halWait
        EXTERN halRfSetRadioFrequency
        EXTERN sppSetAddress
        EXTERN radioSend
        EXTERN FlashWrite
        EXTERN radioReceive

// C:\Documents and Settings\haoyan\×ÀÃæ\SPP-BTÐÞ¸Ä°æ7\App_Ex\cc2430\source\rf_test.c
//    1 /******************************************************************************
//    2 Filename:     rf_test.c
//    3 Target:       cc2430
//    4 Revised:      16/12-2005
//    5 Revision:     1.0
//    6 
//    7 Description:
//    8     This file provides 4 small tests which demonstrates use of the radio.
//    9 
//   10 ******************************************************************************/
//   11 
//   12 #include "ioCC2430.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//   13 #include "cul.h"
//   14 #include "hal.h"
//   15 #include "RF04EB.h"
//   16 #include "flash.h"
//   17 
//   18 //#define ADDRESS_0 0x01
//   19 //#define ADDRESS_1 0x02
//   20 
//   21 #define SEND     0
//   22 #define RECEIVE  1
//   23 #define RECEIVE_TIMEOUT  200
//   24 
//   25 void initRfTest();
//   26 //void receivePacket(UINT8 *receiveByte);
//   27 //void sendPacket(UINT8 sendByte);
//   28 void Enter_IAP_Mode(void);
//   29 void Process_IAP_Data(void);
//   30 BOOL RADIO_Receive_Data(void);
//   31 BOOL VerifyProgram(BYTE *Data , BYTE length , BYTE CalcResult);
//   32 BOOL CheckAPP(INT32 App_Addr);
//   33 BOOL CheckTable(UINT16 Length,UINT8 CalcResult);
//   34 void Init_Watchdog(void);
//   35 void BT_Init(void);
//   36 BOOL Mac_Judge(BYTE * ,BYTE *);
//   37 void GetConfig(BYTE num);
//   38 BOOL Is_APP1_Full();
//   39 void Read_Flash();
//   40 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   41 static void (*APPEntry)(void);
APPEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   42 void Delay(UINT8 second);
//   43 void FlashLed(UINT8 LedType,UINT8 FlashNumber);
//   44 
//   45 void UartTX_Send_String(UINT8 *Data,int len);
//   46 void PutChar(UINT8 data);
//   47 
//   48 
//   49 #pragma location=0x2000        //8K+

        ASEGN CODE_AC:CODE:NOROOT,02000H
//   50 const __code UINT8 APP_INFO1[12];//Ó¦ÓÃ³ÌÐòÍêÕûÐÔ±êÖ¾(4 Bytes)+Ó¦ÓÃ³ÌÐò°æ±¾ºÅ+Ó¦ÓÃ³ÌÐòÐ£ÑéºÍ+Ó¦ÓÃ³ÌÐòÈë¿ÚµØÖ·¸ß×Ö½Ú+
APP_INFO1:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   51 //Ó¦ÓÃ³ÌÐòÈë¿ÚµØÖ·µÍ×Ö½Ú+Ó¦ÓÃ³ÌÐòÆðÊ¼µØÖ·¸ß×Ö½Ú+Ó¦ÓÃ³ÌÐòÆðÊ¼µØÖ·µÍ×Ö½Ú+Ó¦ÓÃ³ÌÐò½áÊøµØÖ·¸ß×Ö½Ú+Ó¦ÓÃ³ÌÐò½áÊøµØÖ·µÍ×Ö½Ú
//   52 //#pragma location=0x7000        //32K+
//   53 //const __code UINT8 APP_INFO2[12];
//   54 
//   55 #pragma location=0xC000        //48K+

        ASEGN CODE_AC:CODE:NOROOT,0c000H
//   56 const __code UINT8 Config_Table[8];//ÅäÖÃ±íÍêÕûÐÔ±êÖ¾(4 Bytes)+°æ±¾ºÅ+Ð£ÑéºÍ+ÅäÖÃ±í´óÐ¡¸ß×Ö½Ú+µÍ×Ö½Ú
Config_Table:
        DB 0, 0, 0, 0, 0, 0, 0, 0
//   57 
//   58 #pragma location=0xD800        //54K+

        ASEGN CODE_AC:CODE:NOROOT,0d800H
//   59 const __code UINT8 Node_Info[8];//ÎïÀíµØÖ·(4 Bytes)+Âß¼­µØÖ·+0xFF+0xFF+0xFF  Æµ¶Î+ÊÇ·ñ»ñµÃÂß¼­µØÖ·±êÖ¾+±¾µØµØÖ·+Ô¶³ÌµØÖ·
Node_Info:
        DB 0, 0, 0, 0, 0, 0, 0, 0
//   60 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   61 BYTE WriteFlag[4]={0xFF,0xFF,0xFF,0xFF};//Ó¦ÓÃ³ÌÐòÍêÕûÐÔ±êÖ¾
WriteFlag:
        DS 4
        REQUIRE `?<Initializer for WriteFlag>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   62 BYTE WriteInfo[8]={0x02,0x02,0x02,0x02,0x55,0xFF,0xFF,0xFF};
WriteInfo:
        DS 8
        REQUIRE `?<Initializer for WriteInfo>`
        REQUIRE __INIT_XDATA_I
//   63 //*+³¤¶È+»ã¾ÛID+ÏûÏ¢µØÖ·+ACK±êÖ¾»á»°½áÊø±êÖ¾+Á÷Ë®ºÅ+ÏûÏ¢ÀàÐÍ+ÏûÏ¢²ÎÊýÁÐ±í+#
//   64 //BYTE IAP_ACK[10]={0x2A,0x0A,0xFF,0xFE,0x11,0x31,0x81,0x01,0x00,0x23};
//   65 //BYTE IAP_Request[8]={0x2A,0x08,0xFF,0xFE,0x11,0x21,0x21,0x23};
//   66 //»á»°½áÊø±êÖ¾+Á÷Ë®ºÅ+ÏûÏ¢ÀàÐÍ+ÏûÏ¢²ÎÊýÁÐ±í

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   67 BYTE IAP_ACK[6]={0x11,0x31,0x81,0x01,0x00,0x00};
IAP_ACK:
        DS 6
        REQUIRE `?<Initializer for IAP_ACK>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   68 BYTE IAP_Request[4]={0x11,0x21,0x21,0x01};
IAP_Request:
        DS 4
        REQUIRE `?<Initializer for IAP_Request>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   69 BYTE IAP_NetWork[7]={0x11,0x24,0x24,0x00,0x00,0x00,0x00}; //×éÍøÇëÇó
IAP_NetWork:
        DS 7
        REQUIRE `?<Initializer for IAP_NetWork>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_fffc:
        DS 4
        REQUIRE `?<Initializer for __Constant_fffc>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_25b070:
        DS 4
        REQUIRE `?<Initializer for __Constant_25b070>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_d800:
        DS 4
        REQUIRE `?<Initializer for __Constant_d800>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_2004:
        DS 4
        REQUIRE `?<Initializer for __Constant_2004>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_c004:
        DS 4
        REQUIRE `?<Initializer for __Constant_c004>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_2000:
        DS 4
        REQUIRE `?<Initializer for __Constant_2000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_c000:
        DS 4
        REQUIRE `?<Initializer for __Constant_c000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_3:
        DS 4
        REQUIRE `?<Initializer for __Constant_3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_256250:
        DS 4
        REQUIRE `?<Initializer for __Constant_256250>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_25d780:
        DS 4
        REQUIRE `?<Initializer for __Constant_25d780>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I
//   70 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   71 UINT8 myAddr;
myAddr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   72 UINT8 remoteAddr;
remoteAddr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   73 BYTE* receiveBuffer;
receiveBuffer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   74 BYTE receiveLength;
receiveLength:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   75 BYTE sender;
sender:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   76 UINT32 frequency;
frequency:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 //BOOL Check_Result0=FALSE;//APP Program check result
//   79 //BOOL Check_Result1=FALSE;//Config Table check result

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   80 UINT16 MainAddr;
MainAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   81 //BYTE RX_Data[128];
//   82 //BYTE RX_Length;

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   83 UINT16 Table_Length;
Table_Length:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   84 BYTE Retry_Times=0;
Retry_Times:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   85 
//   86 /******************************************************************************
//   87 * @fn  initRfTest
//   88 *
//   89 * @brief
//   90 *      Initializes components for the RF test application example.
//   91 *
//   92 * Parameters:
//   93 *
//   94 * @param  void
//   95 *
//   96 * @return void
//   97 *
//   98 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   99 void initRfTest(UINT32 frequency)
initRfTest:
//  100 {
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
//  101    //UINT32 frequency = 2425000;
//  102    INIT_GLED();
        SETB    0x90.1
        ORL     0xfe,#0x2
        ANL     0xf4,#0xfd
//  103    INIT_YLED();
        SETB    0x90.0
        ORL     0xfe,#0x1
        ANL     0xf4,#0xfe
//  104    radioInit(frequency, myAddr);
        ; Setup parameters for call to function radioInit
        MOV     DPTR,#myAddr
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   radioInit
//  105 }
        REQUIRE ?Subroutine26
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine26

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine26:
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
//  106 
//  107 /******************************************************************************
//  108 * @fn      Main function.
//  109 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  110 void main(void)
main:
//  111 {
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
//  112       BOOL res;
//  113       BYTE tempcount=10;
//  114       BOOL Wait_Continue=TRUE;
//  115       BYTE Mac[4];
//  116       BYTE num=0;
        MOV     ?V0 + 0,#0x0
//  117       //BOOL Check_Result0;
//  118       myAddr = 0xFF;
        MOV     A,#-0x1
        MOV     DPTR,#myAddr
        MOVX    @DPTR,A
//  119       remoteAddr=0x10;
        MOV     A,#0x10
        MOV     DPTR,#remoteAddr
        MOVX    @DPTR,A
//  120       
//  121       FlashRead(0xFFFC,Mac,4); //¶ÁÈ¡MacµØÖ·
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_fffc
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
//  122       halWait(100);
        ; Setup parameters for call to function halWait
        MOV     R1,#0x64
        LCALL   halWait
//  123       
//  124             
//  125       SET_MAIN_CLOCK_SOURCE(CRYSTAL);
        ANL     0xbe,#0xfb
??main_0:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_0
        NOP
        ANL     0xc6,#0xb8
        MOV     A,0xc6
        ORL     0xbe,#0x4
//  126       SET_32KHZ_CLOCK_SOURCE(RC);
        ORL     0xc6,#0x80
//  127       
//  128       IAP_NetWork[3]=Mac[0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_NetWork + 3)
        MOVX    @DPTR,A
//  129       IAP_NetWork[4]=Mac[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_NetWork + 4)
        MOVX    @DPTR,A
//  130       IAP_NetWork[5]=Mac[2];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_NetWork + 5)
        MOVX    @DPTR,A
//  131       IAP_NetWork[6]=Mac[3];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_NetWork + 6)
        MOVX    @DPTR,A
//  132       initRfTest(2470000);
        ; Setup parameters for call to function initRfTest
        MOV     DPTR,#__Constant_25b070
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   initRfTest
//  133       
//  134       BT_Init();        //Çå³ý±êÖ¾£¬¹ØÖÐ¶Ï
        ; Setup parameters for call to function BT_Init
        LCALL   BT_Init
        MOV     R6,#0xa
//  135       //Init_Watchdog();
//  136       //temp_count=0;
//  137       
//  138        while(tempcount)
//  139         {
//  140           //FeetDog();
//  141           YLED = !YLED;
??main_1:
        MOV     C,0x90.0
        CPL     C
        MOV     0x90.0,C
//  142           halWait(200);
        ; Setup parameters for call to function halWait
        LCALL   ?Subroutine14
//  143           halWait(200);
//  144           tempcount--;
//  145         }
??CrossCallReturnLabel_37:
        DEC     R6
        MOV     A,R6
        JNZ     ??main_1
//  146        
//  147       if(Is_APP1_Full()==TRUE)
        ; Setup parameters for call to function Is_APP1_Full
        LCALL   Is_APP1_Full
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??main_2
//  148       {
//  149          MainAddr = BUILD_UINT16(APP_INFO1[7], APP_INFO1[6]);//MSB
        MOV     DPTR,#0x2007
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     DPTR,#0x2006
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     DPTR,#MainAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  150          APPEntry = (void (*)(void))MainAddr;
        MOV     DPTR,#APPEntry
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  151          (*APPEntry)(); 
        ; Setup parameters for indirect call
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  152       }
//  153       else
//  154       {       
//  155         if(Node_Info[4] != 0x55)
//  156         {
//  157           while(Wait_Continue)
//  158           {
//  159       //========== add relay configuration============//      
//  160             GetConfig(num);
//  161       //==========add relay configuration============// 
//  162           //¸ù¾ÝÂß¼­µØÖ·µ÷Æµ
//  163             halRfSetRadioFrequency(frequency);
//  164             
//  165             //UartTX_Send_String(IAP_NetWork, 7);
//  166             
//  167             halWait(200);
//  168             radioSend(IAP_NetWork, 7, remoteAddr, DO_NOT_ACK );
//  169             halWait(50);
//  170             res = RADIO_Receive_Data();
//  171             
//  172             //UartTX_Send_String(receiveBuffer,receiveLength);
//  173             if(res==TRUE && receiveBuffer[2]==0x34 && Mac_Judge(receiveBuffer,Mac)==TRUE)//ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½×éÍøÇëÇó»Ø¸´ÏûÏ¢
//  174             {
//  175               //UartTX_Send_String(receiveBuffer,receiveLength);
//  176               
//  177               Wait_Continue = FALSE;
//  178               myAddr = receiveBuffer[5];
//  179               sppSetAddress(myAddr);
//  180               WriteInfo[0]=(BYTE)((frequency & 0xFF000000)/0x1000000);
//  181               WriteInfo[1]=(BYTE)((frequency & 0x00FF0000)/0x10000);
//  182               WriteInfo[2]=(BYTE)((frequency & 0x0000FF00)>>8);
//  183               WriteInfo[3]=(BYTE)(frequency & 0x000000FF);
//  184               WriteInfo[4]=0x55;
//  185               WriteInfo[5]=myAddr;
//  186               WriteInfo[6]=remoteAddr;
//  187               FlashWrite( WriteInfo , 0xD800 , 8 );
//  188               halWait(200);
//  189             }
//  190             else
//  191             {
//  192               GLED = !GLED;
//  193               num = (num +1)%3;
//  194             }
//  195           }
//  196         }
//  197         else
//  198         {
//  199           //¶ÁÆµ,Âß¼­µØÖ·ÒÔ¼°Ä¿µÄÖÐ¼ÌµØÖ·
//  200           frequency=((UINT32)Node_Info[0]<<24)+((UINT32)Node_Info[1]<<16)+((UINT32)Node_Info[2]<<8)+((UINT32)Node_Info[3]);
//  201           halRfSetRadioFrequency(frequency);
//  202           halWait(100);
//  203           sppSetAddress(Node_Info[5]);
//  204           remoteAddr=Node_Info[6];
//  205         }
//  206         
//  207         //½øÈëÏÂÔØÁ÷³Ì
//  208         while(1)
//  209         {
//  210           //FeetDog();
//  211           IAP_Request[1]=0x21;
//  212           IAP_Request[2]=0x21;
//  213           Enter_IAP_Mode();
//  214         }
//  215       }
//  216 }
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        RET
??main_2:
        MOV     DPTR,#-0x27fc
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x55
        JZ      $+5
        LJMP    ??main_3
        MOV     DPTR,#-0x2800
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     DPTR,#-0x27ff
        MOVC    A,@A+DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#-0x27fe
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 6,#0x0
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#-0x27fd
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function halRfSetRadioFrequency
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   halRfSetRadioFrequency
        ; Setup parameters for call to function halWait
        MOV     R1,#0x64
        LCALL   halWait
        ; Setup parameters for call to function sppSetAddress
        MOV     DPTR,#-0x27fb
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,A
        LCALL   sppSetAddress
        MOV     DPTR,#-0x27fa
        CLR     A
        MOVC    A,@A+DPTR
        MOV     DPTR,#remoteAddr
        MOVX    @DPTR,A
??main_4:
        MOV     A,#0x21
        MOV     DPTR,#(IAP_Request + 1)
        MOVX    @DPTR,A
        MOV     DPTR,#(IAP_Request + 2)
        MOVX    @DPTR,A
        ; Setup parameters for call to function Enter_IAP_Mode
        LCALL   Enter_IAP_Mode
        SJMP    ??main_4
??main_5:
        MOV     C,0x90.1
        CPL     C
        MOV     0x90.1,C
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     ?V0 + 0,A
??main_3:
        ; Setup parameters for call to function GetConfig
        MOV     R1,?V0 + 0
        LCALL   GetConfig
        ; Setup parameters for call to function halRfSetRadioFrequency
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   halRfSetRadioFrequency
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
        ; Setup parameters for call to function radioSend
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        MOV     DPTR,#remoteAddr
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(IAP_NetWork & 0xff)
        MOV     R3,#((IAP_NetWork >> 8) & 0xff)
        LCALL   radioSend
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x32
        LCALL   ?Subroutine15
??CrossCallReturnLabel_39:
        JNZ     ??main_5
        LCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        XRL     A,#0x34
        JNZ     ??main_5
        ; Setup parameters for call to function Mac_Judge
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   Mac_Judge
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??main_5
        LCALL   ?Subroutine21
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#myAddr
        MOVX    @DPTR,A
        ; Setup parameters for call to function sppSetAddress
        MOV     R1,A
        LCALL   sppSetAddress
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOV     DPTR,#WriteInfo
        LCALL   ?Subroutine13
??CrossCallReturnLabel_34:
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOV     DPTR,#(WriteInfo + 1)
        LCALL   ?Subroutine13
??CrossCallReturnLabel_35:
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 1
        MOV     DPTR,#(WriteInfo + 2)
        LCALL   ?Subroutine13
??CrossCallReturnLabel_36:
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        MOV     DPTR,#(WriteInfo + 3)
        MOVX    @DPTR,A
        MOV     A,#0x55
        MOV     DPTR,#(WriteInfo + 4)
        MOVX    @DPTR,A
        MOV     DPTR,#myAddr
        MOVX    A,@DPTR
        MOV     DPTR,#(WriteInfo + 5)
        MOVX    @DPTR,A
        MOV     DPTR,#remoteAddr
        MOVX    A,@DPTR
        MOV     DPTR,#(WriteInfo + 6)
        MOVX    @DPTR,A
        ; Setup parameters for call to function FlashWrite
        MOV     DPTR,#__Constant_d800
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#(WriteInfo & 0xff)
        MOV     R3,#((WriteInfo >> 8) & 0xff)
        LCALL   ?Subroutine27
??CrossCallReturnLabel_66:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
        LJMP    ??main_4
        REQUIRE _A_P1
        REQUIRE SLEEP
        REQUIRE CLKCON
        REQUIRE APP_INFO1
        REQUIRE Node_Info

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        MOVX    @DPTR,A
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        RET
//  217 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  218 void Enter_IAP_Mode(void)
Enter_IAP_Mode:
//  219 {
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
//  220   BOOL Start_Flag=FALSE;
//  221   BOOL res;    
//  222   Init_Watchdog();
        ; Setup parameters for call to function Init_Watchdog
        LCALL   Init_Watchdog
//  223   
//  224   while(!Start_Flag)
//  225   { 
//  226     //FeetDog();
//  227     
//  228     //UartTX_Send_String(IAP_Request, 4);
//  229     
//  230     radioSend(IAP_Request, 4, remoteAddr, DO_NOT_ACK );
??Enter_IAP_Mode_0:
        ; Setup parameters for call to function radioSend
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        MOV     DPTR,#remoteAddr
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(IAP_Request & 0xff)
        MOV     R3,#((IAP_Request >> 8) & 0xff)
        LCALL   radioSend
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
//  231     halWait(10);
        ; Setup parameters for call to function halWait
        MOV     R1,#0xa
        LCALL   ?Subroutine15
//  232     res = RADIO_Receive_Data();
//  233     
//  234     if(res==TRUE &&((receiveBuffer[2]==0x31)||(receiveBuffer[2]==0x33)))
??CrossCallReturnLabel_40:
        JNZ     ??Enter_IAP_Mode_1
        LCALL   ?Subroutine0
??CrossCallReturnLabel_1:
        MOV     R2,A
        MOV     A,#0x31
        XRL     A,R2
        JZ      ??Enter_IAP_Mode_2
        MOV     A,#0x33
        XRL     A,R2
        JNZ     ??Enter_IAP_Mode_1
//  235     {
//  236       //UartTX_Send_String(receiveBuffer,receiveLength);
//  237       Start_Flag = TRUE;
//  238       YLED = LED_ON;//½øÈëIAPÄ£Ê½¹¤×÷Ö¸Ê¾µÆ
??Enter_IAP_Mode_2:
        CLR     0x90.0
//  239       Retry_Times=0;
        CLR     A
        MOV     DPTR,#Retry_Times
        MOVX    @DPTR,A
//  240       Process_IAP_Data();//½ÓÊÕµ½¸üÐÂ³ÌÐòÆðÊ¼°ü
        ; Setup parameters for call to function Process_IAP_Data
        LCALL   Process_IAP_Data
//  241     }
//  242     else
//  243     {
//  244       Retry_Times=Retry_Times+1; 
//  245       if(Retry_Times>=6)
//  246          HAL_SYSTEM_RESET();
//  247     }
//  248   }    
//  249 }
        LJMP    ?Subroutine28
??Enter_IAP_Mode_1:
        MOV     DPTR,#Retry_Times
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x6
        JC      ??Enter_IAP_Mode_0
        LCALL   ?Subroutine16
??CrossCallReturnLabel_41:
        SJMP    ??CrossCallReturnLabel_41
        REQUIRE _A_P1
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE WDCTL

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        LCALL   halWait
        ; Setup parameters for call to function RADIO_Receive_Data
        ; Setup parameters for call to function RADIO_Receive_Data
        LCALL   RADIO_Receive_Data
        MOV     A,R1
        XRL     A,#0x1
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ?Subroutine23
??CrossCallReturnLabel_56:
        RET
//  250 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  251 void Process_IAP_Data(void)
Process_IAP_Data:
//  252 {   
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 129
        MOV     A,#0x7f
        LCALL   ?ALLOC_XSTACK8
//  253    BYTE Flash_Value[128];
//  254    BOOL IAP_Result = FALSE;
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  255    BYTE length;
//  256    BYTE CalcResult;
//  257    UINT16 FlashAddr;
//  258    UINT16 WriteAddr;
//  259    BOOL res=TRUE;
        SJMP    ??Process_IAP_Data_0
//  260        
//  261    while(1)
//  262    {
//  263      if((res==TRUE)&&((receiveBuffer[2]==0x31)||(receiveBuffer[2]==0x33)))
//  264      {
//  265         IAP_ACK[0]=0x11;//¸üÐÂ»á»°½áÊø±êÖ¾
//  266         IAP_ACK[1]=receiveBuffer[2];//ÓëÏûÏ¢ÀàÐÍ±£³ÖÒ»ÖÂ 
//  267         IAP_ACK[4]=receiveBuffer[3];
//  268         IAP_ACK[5]=receiveBuffer[4];//¸üÐÂACKµÄ³ÌÐò°üÁ÷Ë®ºÅ
//  269         
//  270         if(receiveBuffer[3]==0x00 && receiveBuffer[4]==0x00)//¸üÐÂÆðÊ¼°ü
//  271         {
//  272           if(receiveBuffer[2]==0x31)//½ÓÊÕµ½¸üÐÂ³ÌÐò°ü
//  273           {
//  274             //UartTX_Send_String((UINT8 *)receiveBuffer,receiveLength);
//  275             
//  276             CalcResult=receiveBuffer[13];
//  277             length=8;
//  278             if(receiveBuffer[9]==0x24)//APP Aplication 1 ÆðÊ¼µØÖ·0x2400
//  279             {
//  280               //UartTX_Send_String("A",1);
//  281               //for(int i=0;i<4;i++)
//  282               //  WriteFlag[i]=0x11; 
//  283              // WriteAddr=0x2000;
//  284               //halWait(100);
//  285               FlashWrite((receiveBuffer+5) , 0x2004, length);
//  286               halWait(20);
//  287               FlashRead(0x2004, Flash_Value , length );
//  288               //halWait(200);
//  289             }
//  290           }
//  291           
//  292           if(receiveBuffer[2]==0x33)//½ÓÊÕµ½¸üÐÂÅäÖÃ±í°ü
//  293           {
//  294             //UartTX_Send_String((UINT8 *)receiveBuffer,receiveLength);
//  295             
//  296             CalcResult=receiveBuffer[9];
//  297             length=4;
//  298             //for(int i=0;i<4;i++)
//  299              //   WriteFlag[i]=0x88;
//  300              // WriteAddr=0xC000;
//  301             //halWait(100);
//  302             FlashWrite((receiveBuffer+5) , 0xC004, length);
//  303             halWait(20);
//  304             FlashRead(0xC004, Flash_Value , length );
//  305             //halWait(200);
//  306           }    
//  307         }
//  308         else                    //¸üÐÂÊý¾Ý°ü
//  309         {
//  310           //UartTX_Send_String((UINT8 *)receiveBuffer,receiveLength);
//  311           
//  312           length = receiveBuffer[5];
//  313           CalcResult = receiveBuffer[length+8];
//  314           FlashAddr = BUILD_UINT16(receiveBuffer[7], receiveBuffer[6]);//MSB
//  315           FlashWrite((receiveBuffer+8) , FlashAddr, length);
//  316           halWait(20);
//  317           FlashRead(FlashAddr , Flash_Value , length );
//  318         }
//  319       
//  320         if(TRUE==VerifyProgram(Flash_Value,length,CalcResult))
//  321         {
//  322             IAP_ACK[3]=0x01;//¸üÐÂACKµÄÈ·ÈÏ×´Ì¬
//  323             if(receiveBuffer[3]==0x00 && receiveBuffer[4]==0x01 && receiveBuffer[2]==0x31)
//  324             {//Ó¦ÓÃ³ÌÐò×îºóÒ»¸ö°ü
//  325               IAP_ACK[0]=0x00;//¸üÐÂ»á»°½áÊø±êÖ¾
//  326               for(int i=0;i<4;i++)
//  327                 WriteFlag[i]=0x11;
//  328               WriteAddr=0x2000;
//  329               FlashWrite( WriteFlag , WriteAddr , 4 );
//  330               halWait(20);
//  331               //UartTX_Send_String(WriteFlag,4);
//  332               //for(int i=0;i<4;i++)
//  333               //  WriteFlag[i]=0x88;
//  334               //WriteAddr=0xC000;
//  335               //halWait(100);
//  336               //FlashWrite( WriteFlag , WriteAddr , 4 );
//  337             }
//  338             if(receiveBuffer[3]==0x00 && receiveBuffer[4]==0x01 && receiveBuffer[2]==0x33)
//  339             {//ÅäÖÃ±í×îºóÒ»¸ö°ü
//  340               IAP_ACK[0]=0x00;//¸üÐÂ»á»°½áÊø±êÖ¾
//  341               for(int i=0;i<4;i++)
//  342                 WriteFlag[i]=0x88;
//  343               WriteAddr=0xC000;
//  344               FlashWrite( WriteFlag , WriteAddr , 4 );
//  345               halWait(20);
//  346               //UartTX_Send_String(WriteFlag,4);
//  347             }
//  348             if(Is_APP1_Full()==TRUE)//¸üÐÂ½áÊø°ü
//  349             {
//  350               //IAP_ACK[0]=0x10;//¸üÐÂ»á»°½áÊø±êÖ¾
//  351               IAP_Result = TRUE;
//  352             }
//  353         }  
//  354         else
//  355         {
//  356           IAP_ACK[3]=0x00; //¸Ã´ÎÊý¾Ý°üÐ´ÈëÊ§°Ü
//  357         }
//  358          
//  359         Retry_Times=0;
//  360         receiveBuffer=NULL;
//  361         receiveLength=0;
//  362         res=FALSE;
//  363       }
//  364       else
//  365       {
//  366         Retry_Times=Retry_Times+1; 
//  367         if(Retry_Times>=18)
//  368            HAL_SYSTEM_RESET();
//  369       }
//  370       
//  371       //FeetDog();
//  372      
//  373       //UartTX_Send_String(IAP_ACK, 6);
//  374       
//  375       //halWait(200);
//  376       radioSend(IAP_ACK, 6, remoteAddr, DO_NOT_ACK );//ÎÞÂÛ½ÓÊÕÊÇ·ñ³É¹¦£¬¶¼Òª·¢ACK±êÖ¾
//  377       halWait(50);
//  378       
//  379         //res=RADIO_Receive_Data();
//  380         /*if(res==TRUE && receiveBuffer[2]==0x3F)
//  381         {
//  382           UartTX_Send_String((UINT8 *)receiveBuffer,receiveLength);
//  383           //halWait(100);
//  384           Wait=TRUE;
//  385           Retry_Times=0;
//  386         }
//  387         else
//  388         {
//  389           Retry_Times=Retry_Times+1; 
//  390           if(Retry_Times>=10)
//  391              HAL_SYSTEM_RESET();
//  392         }
//  393       }*/
//  394       //radioSend(IAP_ACK, 5, remoteAddr, DO_NOT_ACK );
//  395       //halWait(100);
//  396       
//  397       //Wait=FALSE;
//  398       
//  399       if(IAP_Result == TRUE)
//  400       {
//  401         //UartTX_Send_String("Z",1);
//  402         //FeetDog();
//  403         
//  404         //Read_Flash();
//  405         HAL_SYSTEM_RESET(); 
//  406       }
//  407       
//  408       //halWait(100);
//  409       res = RADIO_Receive_Data();
??Process_IAP_Data_1:
        ; Setup parameters for call to function RADIO_Receive_Data
        LCALL   RADIO_Receive_Data
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Process_IAP_Data_2
??Process_IAP_Data_0:
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x2
        LCALL   ?Subroutine6
??CrossCallReturnLabel_13:
        XRL     A,#0x31
        JZ      ??Process_IAP_Data_3
        MOVX    A,@DPTR
        XRL     A,#0x33
        JZ      $+5
        LJMP    ??Process_IAP_Data_2
??Process_IAP_Data_3:
        MOV     A,#0x11
        MOV     DPTR,#IAP_ACK
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_ACK + 1)
        MOVX    @DPTR,A
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_ACK + 4)
        MOVX    @DPTR,A
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x4
        INC     R2
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPTR,#(IAP_ACK + 5)
        MOVX    @DPTR,A
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x5
        INC     R2
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??Process_IAP_Data_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??Process_IAP_Data_4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??Process_IAP_Data_5
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0xd
        LCALL   ?Subroutine6
??CrossCallReturnLabel_14:
        MOV     ?V0 + 5,A
        MOV     ?V0 + 4,#0x8
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ?Subroutine1
??CrossCallReturnLabel_3:
        XRL     A,#0x24
        JNZ     ??Process_IAP_Data_5
        ; Setup parameters for call to function FlashWrite
        MOV     DPTR,#__Constant_2004
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R4,#0x8
        MOV     R5,#0x0
        LCALL   ?Subroutine27
??CrossCallReturnLabel_67:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x14
        LCALL   halWait
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_2004
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine12
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
??Process_IAP_Data_5:
        LCALL   ?Subroutine0
??CrossCallReturnLabel_2:
        XRL     A,#0x33
        JZ      $+5
        LJMP    ??Process_IAP_Data_6
        MOV     DPTR,#(receiveBuffer + 1)
        LCALL   ?Subroutine1
??CrossCallReturnLabel_4:
        MOV     ?V0 + 5,A
        MOV     ?V0 + 4,#0x4
        ; Setup parameters for call to function FlashWrite
        MOV     DPTR,#__Constant_c004
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ?Subroutine7
??CrossCallReturnLabel_62:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x14
        LCALL   halWait
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_c004
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??Process_IAP_Data_7
??Process_IAP_Data_4:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     DPL,A
        MOV     R6,DPL
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        DEC     R0
        DEC     R0
        LCALL   ?Subroutine4
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine4
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        ; Setup parameters for call to function FlashWrite
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        ADD     A,#0x8
        LCALL   ?Subroutine7
??CrossCallReturnLabel_63:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x14
        LCALL   halWait
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 6,R6
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,#0x0
        MOV     R5,#0x0
??Process_IAP_Data_7:
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
??Process_IAP_Data_6:
        ; Setup parameters for call to function VerifyProgram
        MOV     R4,?V0 + 5
        MOV     R1,?V0 + 4
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   VerifyProgram
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??Process_IAP_Data_8
        MOV     A,#0x1
        MOV     DPTR,#(IAP_ACK + 3)
        MOVX    @DPTR,A
        LCALL   ?Subroutine2
??CrossCallReturnLabel_5:
        JNZ     ??Process_IAP_Data_9
        LCALL   ?Subroutine3
??CrossCallReturnLabel_7:
        JNZ     ??Process_IAP_Data_9
        LCALL   ?Subroutine10
??CrossCallReturnLabel_20:
        XRL     A,#0x31
        JNZ     ??Process_IAP_Data_9
        CLR     A
        MOV     DPTR,#IAP_ACK
        MOVX    @DPTR,A
        MOV     R0,A
        MOV     R1,A
??Process_IAP_Data_10:
        LCALL   ?Subroutine19
??CrossCallReturnLabel_48:
        MOV     A,#0x11
        LCALL   ?Subroutine11
??CrossCallReturnLabel_22:
        JC      ??Process_IAP_Data_10
        ; Setup parameters for call to function FlashWrite
        MOV     DPTR,#__Constant_2000
        LCALL   ?PUSH_XSTACK8_X_FOUR
        LCALL   ?Subroutine18
??CrossCallReturnLabel_64:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x14
        LCALL   halWait
??Process_IAP_Data_9:
        LCALL   ?Subroutine2
??CrossCallReturnLabel_6:
        JNZ     ??Process_IAP_Data_11
        LCALL   ?Subroutine3
??CrossCallReturnLabel_8:
        JNZ     ??Process_IAP_Data_11
        LCALL   ?Subroutine10
??CrossCallReturnLabel_21:
        XRL     A,#0x33
        JNZ     ??Process_IAP_Data_11
        CLR     A
        MOV     DPTR,#IAP_ACK
        MOVX    @DPTR,A
        MOV     R0,A
        MOV     R1,A
??Process_IAP_Data_12:
        LCALL   ?Subroutine19
??CrossCallReturnLabel_49:
        MOV     A,#-0x78
        LCALL   ?Subroutine11
??CrossCallReturnLabel_23:
        JC      ??Process_IAP_Data_12
        ; Setup parameters for call to function FlashWrite
        MOV     DPTR,#__Constant_c000
        LCALL   ?PUSH_XSTACK8_X_FOUR
        LCALL   ?Subroutine18
??CrossCallReturnLabel_65:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x14
        LCALL   halWait
??Process_IAP_Data_11:
        ; Setup parameters for call to function Is_APP1_Full
        LCALL   Is_APP1_Full
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??Process_IAP_Data_13
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??Process_IAP_Data_14
??Process_IAP_Data_8:
        CLR     A
        MOV     DPTR,#(IAP_ACK + 3)
??Process_IAP_Data_14:
        MOVX    @DPTR,A
??Process_IAP_Data_13:
        CLR     A
        MOV     DPTR,#Retry_Times
        MOVX    @DPTR,A
        MOV     DPTR,#receiveBuffer
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#receiveLength
        MOVX    @DPTR,A
??Process_IAP_Data_15:
        ; Setup parameters for call to function radioSend
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        MOV     DPTR,#remoteAddr
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(IAP_ACK & 0xff)
        MOV     R3,#((IAP_ACK >> 8) & 0xff)
        LCALL   radioSend
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function halWait
        MOV     R1,#0x32
        LCALL   halWait
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Process_IAP_Data_1
        LCALL   ?Subroutine16
??CrossCallReturnLabel_42:
        SJMP    ??CrossCallReturnLabel_42
??Process_IAP_Data_2:
        MOV     DPTR,#Retry_Times
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x12
        JC      ??Process_IAP_Data_15
        LCALL   ?Subroutine16
??CrossCallReturnLabel_43:
        SJMP    ??CrossCallReturnLabel_43
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE WDCTL
//  410   }  
//  411 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine19:
        MOV     A,R0
        ADD     A,#(WriteFlag & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#((WriteFlag >> 8) & 0xff)
        MOV     DPH,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine18:
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(WriteFlag & 0xff)
        MOV     R3,#((WriteFlag >> 8) & 0xff)
        REQUIRE ?Subroutine27
        ; // Fall through to label ?Subroutine27

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine27:
        LCALL   FlashWrite
        MOV     A,#0x4
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine16:
        MOV     0x9a,#0x0
        MOV     0xb8,#0x0
        MOV     0xa8,#0x0
        ANL     0xc9,#0xfc
        MOV     A,0xc9
        ORL     0xc9,#0x1
        ORL     0xc9,#0x8
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x4
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        MOV     DPTR,#(receiveBuffer + 1)
        LCALL   ?Subroutine23
??CrossCallReturnLabel_57:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine23:
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ?Subroutine27

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        MOV     DPTR,#(receiveBuffer + 1)
        LCALL   ?Subroutine22
??CrossCallReturnLabel_55:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine22:
        LCALL   ?Subroutine24
??CrossCallReturnLabel_59:
        INC     DPTR
        INC     DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        MOV     DPTR,#(receiveBuffer + 1)
        LCALL   ?Subroutine24
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        XRL     A,#0x1
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine24:
        LCALL   ?Subroutine25
??CrossCallReturnLabel_61:
        INC     DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        LCALL   ?Subroutine21
??CrossCallReturnLabel_53:
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine21:
        MOV     DPTR,#receiveBuffer
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ?Subroutine25
??CrossCallReturnLabel_60:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine25:
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        LCALL   ?Subroutine22
??CrossCallReturnLabel_54:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
//  412 
//  413 //½ÓÊÕÊý¾Ý°ü¸ñÊ½£º»á»°½áÊø±êÖ¾+Á÷Ë®ºÅ+ÏûÏ¢ÀàÐÍ+ÏûÏ¢²ÎÊýÁÐ±í

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  414 BOOL  RADIO_Receive_Data(void)
RADIO_Receive_Data:
//  415 {  
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
//  416    BOOL Waiting_Continue = TRUE;      
//  417    BOOL Receive_Result=FALSE;
//  418    UINT16 timeout=20;
        MOV     R6,#0x14
        MOV     R7,#0x0
        SJMP    ??RADIO_Receive_Data_0
//  419    BOOL res;
//  420    
//  421    while(Waiting_Continue)
//  422    {
//  423       FeetDog();
//  424       res = radioReceive(&receiveBuffer, &receiveLength, RECEIVE_TIMEOUT, &sender);
//  425       //halWait(200);
//  426       if(res == TRUE)
//  427       {
//  428         GLED = !GLED;
//  429         Waiting_Continue = FALSE;
//  430         Receive_Result=TRUE;
//  431       }
//  432       else
//  433       {
//  434          if(timeout>0)
//  435          {
//  436              halWait(1);
??RADIO_Receive_Data_1:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x1
        LCALL   halWait
//  437              timeout--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
//  438          }
??RADIO_Receive_Data_0:
        MOV     0xc9,#-0x60
        MOV     0xc9,#0x50
        ; Setup parameters for call to function radioReceive
        MOV     ?V0 + 0,#(sender & 0xff)
        MOV     ?V0 + 1,#((sender >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#(receiveLength & 0xff)
        MOV     R5,#((receiveLength >> 8) & 0xff)
        MOV     R2,#(receiveBuffer & 0xff)
        MOV     R3,#((receiveBuffer >> 8) & 0xff)
        LCALL   radioReceive
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??RADIO_Receive_Data_2
        MOV     C,0x90.1
        CPL     C
        MOV     0x90.1,C
        MOV     R1,#0x1
        SJMP    ??RADIO_Receive_Data_3
??RADIO_Receive_Data_2:
        MOV     A,R6
        JNZ     ??RADIO_Receive_Data_4
        MOV     A,R7
??RADIO_Receive_Data_4:
        JNZ     ??RADIO_Receive_Data_1
//  439          else
//  440          {
//  441            Waiting_Continue = FALSE;
//  442            Receive_Result=FALSE;
        MOV     R1,#0x0
//  443          }
//  444      
//  445        }
//  446    }
//  447    return Receive_Result;
??RADIO_Receive_Data_3:
        REQUIRE ?Subroutine29
        REQUIRE _A_P1
        REQUIRE WDCTL
        ; // Fall through to label ?Subroutine29
//  448 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine29:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
//  449 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  450 BOOL VerifyProgram(BYTE *Data , BYTE length , BYTE CalcResult)
VerifyProgram:
//  451 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
//  452   //UartTX_Send_String("HH",2);
//  453   BOOL result = FALSE;
//  454   UINT8 XCalcResult=0;
        MOV     R5,#0x0
//  455   
//  456   for(UINT8 i=0;i<length;i++)
        MOV     R6,#0x0
        SJMP    ??VerifyProgram_0
//  457      XCalcResult+=Data[i];
??VerifyProgram_1:
        MOV     ?V0 + 0,R6
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine17_0
??CrossCallReturnLabel_44:
        ADD     A,R5
        MOV     R5,A
        INC     R6
??VerifyProgram_0:
        MOV     A,R6
        CLR     C
        SUBB    A,R1
        JC      ??VerifyProgram_1
//  458   
//  459   //UartTX_Send_String(Data,8);
//  460   if(XCalcResult==CalcResult)
        MOV     A,R4
        XRL     A,R5
        JNZ     ??VerifyProgram_2
//  461     result = TRUE;
        MOV     R1,#0x1
        SJMP    ??VerifyProgram_3
//  462   else
//  463     result = FALSE;
??VerifyProgram_2:
        MOV     R1,#0x0
//  464   
//  465   return result;
??VerifyProgram_3:
        SJMP    ?Subroutine29
//  466 }
//  467 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  468 void Delay(UINT8 second)//delay ** seconds
Delay:
//  469 {
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  470   UINT16 j;
//  471   for(j=0;j<5*second;j++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??Delay_0
//  472   {
//  473       halWait(200);
??Delay_1:
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  474   } 
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??Delay_0:
        MOV     A,?V0 + 0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        CLR     A
        ADD     A,R2
        MOV     R1,A
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JC      ??Delay_1
//  475 }
        SJMP    ?Subroutine28
//  476 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  477 void FlashLed(UINT8 LedType,UINT8 FlashNumber)
FlashLed:
//  478 {
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
        SJMP    ??FlashLed_0
//  479   while(FlashNumber)
//  480   {
//  481     if(LedType==0)
//  482     {
//  483       YLED = LED_ON;
//  484       halWait(200);
//  485       YLED = LED_OFF;
//  486       halWait(200);
//  487     }
//  488     else
//  489     {
//  490       GLED = LED_ON;
??FlashLed_1:
        CLR     0x90.1
//  491       halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  492       GLED = LED_OFF;
        SETB    0x90.1
//  493       halWait(200);
        ; Setup parameters for call to function halWait
??FlashLed_2:
        MOV     R1,#-0x38
        LCALL   halWait
//  494     }
//  495     FlashNumber=FlashNumber-1;
        DEC     R6
??FlashLed_0:
        MOV     A,R6
        JZ      ??FlashLed_3
        MOV     A,R7
        JNZ     ??FlashLed_1
        CLR     0x90.0
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
        SETB    0x90.0
        ; Setup parameters for call to function halWait
        SJMP    ??FlashLed_2
//  496   } 
//  497 }
??FlashLed_3:
        SJMP    ?Subroutine28
        REQUIRE _A_P1
//  498 /****************************************************************
//  499 *º¯Êý¹¦ÄÜ £º´®¿Ú·¢ËÍ×Ö·û´®º¯Êý					
//  500 *Èë¿Ú²ÎÊý : data:Êý¾Ý									
//  501 *			len :Êý¾Ý³¤¶È							
//  502 *·µ »Ø Öµ £ºÎÞ											
//  503 *Ëµ    Ã÷ £º				
//  504 ****************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  505 void PutChar(BYTE data)
PutChar:
//  506 {
        ; Saved register size: 0
        ; Auto size: 0
//  507     U0DBUF = data;
        MOV     0xc1,R1
//  508     while(UTX0IF == 0);
??PutChar_0:
        MOV     C,0xe8.1
        JNC     ??PutChar_0
//  509     UTX0IF = 0;
        CLR     0xe8.1
//  510 }
        RET
        REQUIRE U0DBUF
        REQUIRE _A_IRCON2
//  511 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  512 void UartTX_Send_String(BYTE *Data,int len)
UartTX_Send_String:
//  513 {       
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        SJMP    ??UartTX_Send_String_0
//  514   while(len>0)
//  515   {    
//  516      PutChar(*Data);  
??UartTX_Send_String_1:
        ; Setup parameters for call to function PutChar
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   PutChar
//  517      *Data++;
        INC     DPTR
//  518      len--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
??UartTX_Send_String_0:
        MOV     R7,A
//  519   }       
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??UartTX_Send_String_1
//  520 }
        REQUIRE ?Subroutine28
        ; // Fall through to label ?Subroutine28

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine28:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
//  521 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  522 BOOL CheckAPP(INT32 App_Addr)
CheckAPP:
//  523 {
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 141
        MOV     A,#0x73
        LCALL   ?ALLOC_XSTACK8
//  524   BYTE APP_INFO[12];
//  525   BYTE APP_CalcResult=0;
//  526   UINT16 APP_StartAddr;
//  527   UINT16 APP_EndAddr;
//  528   BYTE Read_Continue=TRUE;
        MOV     ?V0 + 7,#0x1
//  529   UINT16 Read_Length=0;
//  530   UINT16 Read_Addr;
//  531   BYTE APP_DATA[128];
//  532   
//  533   BYTE i=0;
//  534   BYTE Temp_CalcResult=0;
        MOV     ?V0 + 6,#0x0
//  535   BOOL Check_Result=FALSE;
//  536     
//  537   FlashRead(App_Addr,APP_INFO,12);
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 4,#0xc
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_30:
        LCALL   ?DEALLOC_XSTACK8
//  538   halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  539   //halWait(200);
//  540   APP_CalcResult = APP_INFO[5];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  541   APP_StartAddr = BUILD_UINT16(APP_INFO[9], APP_INFO[8]);
//  542   APP_EndAddr = BUILD_UINT16(APP_INFO[11], APP_INFO[10]);
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9
//  543   Read_Addr = APP_StartAddr;
??CrossCallReturnLabel_18:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5
//  544   
//  545   //==========add interrupt vector check============//
//  546   FlashRead(3,APP_DATA,139);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 0,#-0x75
        MOV     ?V0 + 1,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine12
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
//  547   halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  548   for(i=0;i<139;i++)  
        MOV     R2,#0x0
//  549   {
//  550     if(APP_DATA[i]!=0xFF)
??CheckAPP_0:
        MOV     ?V0 + 0,R2
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 0
        LCALL   ?Subroutine17
??CrossCallReturnLabel_45:
        MOV     R3,A
        MOV     A,#-0x1
        XRL     A,R3
        JZ      ??CheckAPP_1
//  551       Temp_CalcResult += APP_DATA[i];
        MOV     A,R3
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
//  552   }
??CheckAPP_1:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#-0x75
        JC      ??CheckAPP_0
//  553   //==========add interrupt vector check============//
//  554   
//  555   while(Read_Continue)
//  556   {
//  557     FeetDog();
??CheckAPP_2:
        LCALL   ?Subroutine20
//  558     if((APP_EndAddr-Read_Addr)>=128)
??CrossCallReturnLabel_50:
        JC      ??CheckAPP_3
//  559     {
//  560       Read_Length = 128;
        MOV     ?V0 + 0,#-0x80
        MOV     ?V0 + 1,#0x0
        SJMP    ??CheckAPP_4
//  561     }
//  562     else
//  563     {
//  564       Read_Length = APP_EndAddr-Read_Addr;
??CheckAPP_3:
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  565       Read_Continue = FALSE;
        MOV     ?V0 + 7,#0x0
//  566     }
//  567     FlashRead(Read_Addr,APP_DATA,Read_Length);
??CheckAPP_4:
        ; Setup parameters for call to function FlashRead
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
//  568     halWait(200);
        ; Setup parameters for call to function halWait
        LCALL   ?Subroutine14
//  569     
//  570     //UartTX_Send_String(APP_DATA,Read_Length);
//  571     
//  572     halWait(200);
//  573     for(i=0;i<Read_Length;i++)
??CrossCallReturnLabel_38:
        MOV     R2,#0x0
        SJMP    ??CheckAPP_5
//  574       Temp_CalcResult += APP_DATA[i];
??CheckAPP_6:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 2
        LCALL   ?Subroutine17
??CrossCallReturnLabel_46:
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        INC     R2
??CheckAPP_5:
        MOV     ?V0 + 2,R2
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 0
        CLR     A
        SUBB    A,?V0 + 1
        JC      ??CheckAPP_6
//  575     Read_Addr += Read_Length;
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
//  576   }
        MOV     A,?V0 + 7
        JNZ     ??CheckAPP_2
//  577   if(APP_CalcResult==Temp_CalcResult)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 6
        JNZ     ??CheckAPP_7
//  578     Check_Result=TRUE;
        MOV     R1,#0x1
        SJMP    ??CheckAPP_8
//  579   else
//  580     Check_Result=FALSE;
??CheckAPP_7:
        MOV     R1,#0x0
//  581   
//  582   return Check_Result;
??CheckAPP_8:
        MOV     A,#-0x73
        REQUIRE ?Subroutine30
        REQUIRE WDCTL
        ; // Fall through to label ?Subroutine30
//  583 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine30:
        LCALL   ?DEALLOC_XSTACK8
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine17:
        MOV     DPL,A
        MOV     A,DPH
??Subroutine17_0:
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine14:
        MOV     R1,#-0x38
        LCALL   halWait
        ; Setup parameters for call to function halWait
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine12:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
??Subroutine12_0:
        LCALL   FlashRead
        MOV     A,#0x4
        RET
//  584 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  585 BOOL CheckTable(UINT16 Length,UINT8 CalcResult)
CheckTable:
//  586 {
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 129
        MOV     A,#0x7f
        LCALL   ?ALLOC_XSTACK8
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  587   BYTE Read_Continue=TRUE;
        MOV     ?V0 + 2,#0x1
//  588   UINT16 Read_Addr=0xC008;
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#-0x40
//  589   UINT16 Read_Length=0;
//  590   BYTE APP_DATA[128];
//  591   BYTE i=0;
//  592   BYTE Temp_CalcResult=0;
        MOV     ?V0 + 3,#0x0
//  593   BOOL Check_Result=FALSE;
//  594   
//  595   while(Read_Continue)
//  596   {
//  597     FeetDog();
??CheckTable_0:
        MOV     0xc9,#-0x60
        MOV     0xc9,#0x50
//  598     if(Length>=128)
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,#-0x80
        MOV     A,?V0 + 7
        SUBB    A,#0x0
        JC      ??CheckTable_1
//  599     {
//  600       Read_Length=128;
        MOV     R6,#-0x80
        MOV     R7,#0x0
//  601       Length=Length-128;
        MOV     A,?V0 + 6
        ADD     A,#-0x80
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        SJMP    ??CheckTable_2
//  602     }
//  603     else
//  604     {
//  605       Read_Length = Length;
??CheckTable_1:
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  606       Read_Continue = FALSE;
        MOV     ?V0 + 2,#0x0
//  607     }
//  608     FlashRead(Read_Addr,APP_DATA,Read_Length);
??CheckTable_2:
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
//  609     halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  610     for(i=0;i<Read_Length;i++)
        MOV     R2,#0x0
        SJMP    ??CheckTable_3
//  611       Temp_CalcResult += APP_DATA[i];
??CheckTable_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 4
        LCALL   ?Subroutine17
??CrossCallReturnLabel_47:
        ADD     A,?V0 + 3
        MOV     ?V0 + 3,A
        INC     R2
??CheckTable_3:
        MOV     ?V0 + 4,R2
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,R6
        CLR     A
        SUBB    A,R7
        JC      ??CheckTable_4
//  612     Read_Addr += Read_Length;
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R7
        MOV     ?V0 + 1,A
//  613   }
        MOV     A,?V0 + 2
        JZ      $+5
        LJMP    ??CheckTable_0
//  614   
//  615   if(CalcResult==Temp_CalcResult)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
        JNZ     ??CheckTable_5
//  616     Check_Result=TRUE;
        MOV     R1,#0x1
        SJMP    ??CheckTable_6
//  617   else
//  618     Check_Result=FALSE;
??CheckTable_5:
        MOV     R1,#0x0
//  619   return Check_Result;
??CheckTable_6:
        MOV     A,#-0x7f
        LJMP    ?Subroutine30
        REQUIRE WDCTL
//  620 }
//  621 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  622 void Init_Watchdog(void)
Init_Watchdog:
//  623 {
        ; Saved register size: 0
        ; Auto size: 0
//  624     WDCTL = 0x00;
        MOV     0xc9,#0x0
//  625     //Ê±¼ä¼ä¸ôÒ»Ãë£¬¿´ÃÅ¹·Ä£Ê½
//  626     WDCTL |= 0x08;
        ORL     0xc9,#0x8
//  627     //Æô¶¯¿´ÃÅ¹·
//  628 }
        RET
        REQUIRE WDCTL
//  629 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  630 void FeetDog(void)
FeetDog:
//  631 {
        ; Saved register size: 0
        ; Auto size: 0
//  632     WDCTL = 0xa0;
        MOV     0xc9,#-0x60
//  633     WDCTL = 0x50;
        MOV     0xc9,#0x50
//  634 }
        RET
        REQUIRE WDCTL
//  635 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  636 void BT_Init(void)
BT_Init:
//  637 {
        ; Saved register size: 0
        ; Auto size: 0
//  638     DISABLE_ALL_INTERRUPTS();                    //¹Ø±ÕËùÓÐÖÐ¶Ï
        MOV     0x9a,#0x0
        MOV     0xb8,#0x0
        MOV     0xa8,#0x0
//  639     URX0IF = 0;
        CLR     0x88.3
//  640     RFIF = 0;
        MOV     0xe9,#0x0
//  641     DMAIF = 0;
        CLR     0xc0.0
//  642     RFERRIF = 0;
        CLR     0x88.1
//  643 }
        RET
        REQUIRE _A_TCON
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE _A_IRCON
        REQUIRE RFIF
//  644 
//  645 /*
//  646 º¯Êý¹¦ÄÜ£ºÈí¼þÑÓÊ±10.94ms
//  647 void Delay(void)
//  648 {
//  649 	uint n;
//  650 	for(n=50000;n>0;n--);
//  651 	for(n=50000;n>0;n--);
//  652 	for(n=50000;n>0;n--);
//  653 	for(n=50000;n>0;n--);
//  654 	for(n=50000;n>0;n--);
//  655 	for(n=50000;n>0;n--);
//  656 	for(n=50000;n>0;n--);
//  657 }
//  658 */
//  659 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  660 void GetConfig(BYTE num)
GetConfig:
//  661 {
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
//  662   switch(num)
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for GetConfig>_0`:
        DATA
        DB        0
        DB        4
        DW        ??GetConfig_0
        DW        ??GetConfig_1
        DW        ??GetConfig_2
        DW        ??GetConfig_3
        DW        ??GetConfig_3
        DW        ??GetConfig_3
        CODE
//  663   {
//  664     case 0:
//  665       frequency = 2470000;
??GetConfig_1:
        MOV     DPTR,#__Constant_25b070
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  666       remoteAddr = 0x10;
        MOV     A,#0x10
        SJMP    ??GetConfig_4
//  667       break;
//  668     case 1:
//  669       frequency = 2450000;
??GetConfig_2:
        MOV     DPTR,#__Constant_256250
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  670       remoteAddr = 0x20;
        MOV     A,#0x20
        SJMP    ??GetConfig_4
//  671       break;
//  672     case 2:
//  673       frequency = 2480000;
??GetConfig_3:
        MOV     DPTR,#__Constant_25d780
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#frequency
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  674       remoteAddr = 0x30;
        MOV     A,#0x30
??GetConfig_4:
        MOV     DPTR,#remoteAddr
        MOVX    @DPTR,A
//  675       break;
//  676     case 3:
//  677       frequency = 2480000;
//  678       remoteAddr = 0x30;
//  679       break;
//  680     case 4:
//  681       frequency = 2480000;
//  682       remoteAddr = 0x30;
//  683       break;
//  684   }
//  685 }
??GetConfig_0:
        LJMP    ?Subroutine26
//  686 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  687 BOOL Mac_Judge(BYTE * receive,BYTE * Mac)
Mac_Judge:
//  688 {
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
//  689   if(receive[6]==Mac[0]&&receive[7]==Mac[1]&&receive[8]==Mac[2]&&receive[9]==Mac[3])
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine8_0
??CrossCallReturnLabel_15:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??Mac_Judge_0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8
??CrossCallReturnLabel_16:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??Mac_Judge_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine8
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??Mac_Judge_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??Mac_Judge_0
//  690     return TRUE;
        MOV     R1,#0x1
        SJMP    ??Mac_Judge_1
//  691   else 
//  692     return FALSE;
??Mac_Judge_0:
        MOV     R1,#0x0
??Mac_Judge_1:
        LJMP    ?Subroutine28
//  693 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        INC     DPTR
??Subroutine8_0:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R4
        MOV     DPH,R5
        RET
//  694 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  695 BOOL Is_APP1_Full()
Is_APP1_Full:
//  696 {
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
//  697   if(APP_INFO1[0]!=0x11 || APP_INFO1[1]!=0x11 || APP_INFO1[2]!=0x11 || APP_INFO1[3]!=0x11
//  698      || Config_Table[0]!=0x88 || Config_Table[1]!=0x88 || Config_Table[2]!=0x88 || Config_Table[3]!=0x88)
        MOV     DPTR,#0x2000
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x11
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#0x2001
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x11
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#0x2002
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x11
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#0x2003
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x11
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#-0x4000
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x88
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#-0x3fff
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x88
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#-0x3ffe
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x88
        JNZ     ??Is_APP1_Full_0
        MOV     DPTR,#-0x3ffd
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,#0x88
        JZ      ??Is_APP1_Full_1
//  699     return FALSE;//ÅäÖÃ±í»òÓ¦ÓÃ³ÌÐòÖ®Ò»²»ÍêÕû£¬Ôò²»ÍêÕû
??Is_APP1_Full_0:
        MOV     R1,#0x0
        SJMP    ??Is_APP1_Full_2
//  700   else
//  701     return TRUE;
??Is_APP1_Full_1:
        MOV     R1,#0x1
??Is_APP1_Full_2:
        POP     DPH
        POP     DPL
        RET
        REQUIRE APP_INFO1
        REQUIRE Config_Table
//  702 }
//  703 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  704 void Read_Flash()
Read_Flash:
//  705 {
        MOV     A,#-0xe
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 14
        ; Auto size: 140
        MOV     A,#0x74
        LCALL   ?ALLOC_XSTACK8
//  706   BYTE APP_INFO[12];
//  707   UINT16 APP_StartAddr;
//  708   UINT16 APP_EndAddr;
//  709   BYTE Read_Continue=TRUE;
        MOV     ?V0 + 6,#0x1
//  710   UINT16 Read_Length=0;
//  711   UINT16 Read_Addr;
//  712   BYTE APP_DATA[128];
//  713   
//  714   FlashRead(0x2000,APP_INFO,12);
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 0,#0xc
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_2000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine12
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
//  715   halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  716   //halWait(200);
//  717   //APP_CalcResult = APP_INFO[5];
//  718   APP_StartAddr = BUILD_UINT16(APP_INFO[9], APP_INFO[8]);
//  719   APP_EndAddr = BUILD_UINT16(APP_INFO[11], APP_INFO[10]);
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9
//  720   Read_Addr = APP_StartAddr;
??CrossCallReturnLabel_19:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5
//  721   
//  722   FlashRead(0,APP_DATA,142);
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function FlashRead
        MOV     ?V0 + 0,#-0x72
        MOV     ?V0 + 1,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine12
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
//  723   //UartTX_Send_String(APP_DATA,142);
//  724   //UartTX_Send_String("CCCC",4);
//  725   
//  726   
//  727   while(Read_Continue)
//  728   {
//  729     FeetDog();
??Read_Flash_0:
        LCALL   ?Subroutine20
//  730     if((APP_EndAddr-Read_Addr)>=128)
??CrossCallReturnLabel_51:
        JC      ??Read_Flash_1
//  731     {
//  732       Read_Length = 128;
        MOV     ?V0 + 0,#-0x80
        MOV     ?V0 + 1,#0x0
        SJMP    ??Read_Flash_2
//  733     }
//  734     else
//  735     {
//  736       Read_Length = APP_EndAddr-Read_Addr;
??Read_Flash_1:
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  737       Read_Continue = FALSE;
        MOV     ?V0 + 6,#0x0
//  738     }
//  739     FlashRead(Read_Addr,APP_DATA,Read_Length);
??Read_Flash_2:
        ; Setup parameters for call to function FlashRead
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
//  740     halWait(200);
        ; Setup parameters for call to function halWait
        MOV     R1,#-0x38
        LCALL   halWait
//  741     
//  742     //UartTX_Send_String(APP_DATA,Read_Length);
//  743     
//  744     //halWait(200);
//  745     //for(i=0;i<Read_Length;i++)
//  746       //Temp_CalcResult += APP_DATA[i];
//  747     Read_Addr += Read_Length;
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
//  748   }
        MOV     A,?V0 + 6
        JNZ     ??Read_Flash_0
//  749 }
        MOV     A,#-0x74
        LCALL   ?DEALLOC_XSTACK8
        MOV     R7,#0x7
        LJMP    ?FUNC_LEAVE_XDATA
        REQUIRE WDCTL

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine20:
        MOV     0xc9,#-0x60
        MOV     0xc9,#0x50
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,?V0 + 5
        SUBB    A,R7
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x80
        MOV     A,R1
        SUBB    A,#0x0
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     ?V0 + 4,A
        MOV     A,R1
        MOV     ?V0 + 5,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        RET

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for WriteFlag>`:
        DB 255, 255, 255, 255

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for WriteInfo>`:
        DB 2, 2, 2, 2, 85, 255, 255, 255

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for IAP_ACK>`:
        DB 17, 49, 129, 1, 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for IAP_Request>`:
        DB 17, 33, 33, 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for IAP_NetWork>`:
        DB 17, 36, 36, 0, 0, 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_fffc>`:
        DD 65532

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_25b070>`:
        DD 2470000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_d800>`:
        DD 55296

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_2004>`:
        DD 8196

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_c004>`:
        DD 49156

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_2000>`:
        DD 8192

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_c000>`:
        DD 49152

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_3>`:
        DD 3

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_256250>`:
        DD 2450000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_25d780>`:
        DD 2480000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_0>`:
        DD 0

        END
//  750             
// 
//    28 bytes in segment CODE_AC
// 3 029 bytes in segment NEAR_CODE
//    14 bytes in segment SFR_AN
//    73 bytes in segment XDATA_I
//    73 bytes in segment XDATA_ID
//    17 bytes in segment XDATA_Z
// 
// 3 058 bytes of CODE  memory (+ 72 bytes shared)
//     0 bytes of DATA  memory (+ 14 bytes shared)
//    46 bytes of XDATA memory (+ 44 bytes shared)
//
//Errors: none
//Warnings: none
